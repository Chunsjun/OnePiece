/**
 * 퀵 정렬 알고리즘 (Quck Sort)
 * 
 * @author devetude
 */
public class Main {
	public static void main(String args[]) {
		int[] arr = { 1, 3, 9, 2, 8, 6, 5, 7, 4 };
		quickSort(arr, 0, arr.length - 1);

		for (int item : arr) {
			System.out.print(item + " ");
		}
	}

	private static void quickSort(int[] arr, int left, int right) {
		// 비교 할 대상이 있을 경우에만 (If Exist Comparable Items)
		if (left < right) {
			// 피봇 값을 맨 왼쪽 아이템으로 설정 (Set Pivot Which Is Left Item)
			int pivot = left;
			int low = left;
			int high = right + 1;

			while (low <= high) {
				// 피봇 값 보다 큰 값이 있을 때 까지 오른쪽으로 이동 (Increase Low When Low Value Bigger Than Pivot Value)
				do {
					low++;
				} while (low <= right && arr[low] > arr[pivot]);

				// 피봇 값 보다 작은 값이 있을 때 까지 왼쪽으로 이동 (Decrease High When High Value Smaller Than Pivot Value)
				do {
					high--;
				} while (high >= left && arr[high] < arr[pivot]);

				// low와 high가 교차 하지 않았을 경우에만 (If The Low And High Crosses Have Not Only)
				if (low < high) {
					// 두 값을 바꿈 (Swap Low And High Value)
					int tmp = arr[low];
					arr[low] = arr[high];
					arr[high] = tmp;
				}
			}

			// 피봇과 교차점(high)의 값을 변경 (Swap Pivot Value And Crossed(High) Value)
			int tmp = arr[high];
			arr[high] = arr[pivot];
			arr[pivot] = tmp;

			// 피봇 값을 기준으로 왼쪽과 오른쪽으로 나누어 재귀호출
			quickSort(arr, left, low - 1);
			quickSort(arr, high + 1, right);
		}
	}
}Quck Sor
